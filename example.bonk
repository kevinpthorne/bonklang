// Comments start with //

// Each file is a 'module'
// Then, typically, you'd want your type definitions
// Then your functions!

mymodule = import; // imports mymodule.bonk and module-scoped things are available as 'mymodule.xyz'
anotherModule = import("test"); // imports test.bonk and aliases it to anotherModule
nestedModule = import("test/"); // imports test/nestModule.bonk

// Typing
// All type names must begin with a capital letter (variables start with lowercase)
LightSwitchState type = Bool;
myState LightSwitchState = true;

// Here are the composite types:
// - Sum Types (e.g. 'or')
//    If the summed types here are not specified ahead of time, then they don't really represent 
//    any certain value. However, you'd no longer have to treat these as strings. You can 
//    pattern-match and exhaustively check whether a variable of type Status matches against one
//    of these.
// Example:
Status type = Ready | Processing | Done;
//    You can do cool things like define Bool with this:
Bool type = True | False;
//    Or even get fancy:
MyNullable type = Int | None;
//    Due to parsing complexity (and future programmer sanity), Sum Types can only except terminal
//    types and cannot accept anonymous Product Types (see Product Types below).
// - Function Types
//     Normally math writes out function types as MyInputType -> MyOutputType
//     but you can save some typing and use ':' -- functions also need to specify
//     an anonymous product input type by default
myFunction(input Int) -> Int { return input; };
myFunc(input Int): Int { return input; };
myLambda(input Int): Int => input;
// - Generic Types (might change) Example:
Str type = Array<Char>; // should throw since Array isn't declared until later
// - Product Types (e.g. tagged unions). 
//     These are like 'tuples' in Python but each element has a name (e.g. a struct!).
//     Elements can have default values. Functions can be added with a function declaration
// Example:
MyProduct type = (firstname Str, lastname Str);
FancyProduct type = (
	x Int = 1
);
FancyProduct.doThing () -> Int => 0;

// Other Scratch

// These types would come out-of-the-box
None type = (); // SML actually represents 'None' like this which is cool
Option<A> type = Some<A> | None; // semantics need to check that 'A' is first declared then used
Ref<A> type = (
	location Int
); // must be defined as type in preamble
Ref<A>.value (): A => read(self.location); // 'read' must be defined as primitive function

Array<A> type = (
	location Int = allocate(self.length), // 'allocate' must be defined as primitive function
	length Int
);
Array<A>.{
	refOf (offset Int): Ref<A> => self.location + offset; // semantics need to allow cast here,
	value (offset Int): A => @self.refOf(offset);
	test (x Int): Int {
		return 4;
	};
};
foo.{bar = 4; baz = 5;};

//see usage in main()

Ew type = Ref<Ref<Int>>; // it is obvious to the programmer that this has 2 indirection levels
SomeOther type = (
	name Str | None,
	abc Int
);

TestFunc type = Ref<(): Int>;

Person type = (
	name Str,
	address ( // address is an anonymous product type, but you don't need to know that: 
	          // you can just use `myPerson.address.city`
		streetname Str,
		city Str
	),
	age Int
);

changeName(person Person, newName Str): Person {
	person.name = newName; // I doubt I'll keep this as-is ... mutability can be evil
	return person;
};

// Polymorphism example
Mile type = Float;
LandVehicle partialtype = ();
LandVehicle.{
	drive(): () => print("default driving");
	odometer(): Mile;
};

Car type = (
	...LandVehicle,
	miles Mile = 0,
	odometer (): Mile => self.miles,  // redefinition okay here since LandVehicle's odometer
	drive (): () => print("sedan driving")
);
Inch type = Float;
Inch.from(m Mile): Inch => m * someConversionFactor;
Mile.from(i Inch): Mile => i * someConversionFactor;
Handcart type = (
	...LandVehicle,
	rotations Int = 0,
	wheelSize Inch = 1.5,
	drive (): () => print("well start pushing then"),
	odometer (): Mile => Float.from(self.rotations) * self.wheelSize * someConversionFactor
	// interesting thought -- why would `someConversionFactor` be needed? couldn't the programmer
	// just say "hey here's the relationship between Inch and Mile" and have the program do it for him?
);
WaterVehicle partialtype = (
	float (): () => print("default float")
);
Hovercraft type = (
	...LandVehicle, // stylistically, these spreads should be at the top
	...WaterVehicle,
	gpsDistance Mile = 0,
	drive (): () => print("hovering"),
	odometer (): Mile => self.gpsDistance
);

main() -> None {
	someClosure(): None {
		return;
	};

	result (name Str) = square(5); // should throw on type-mismatch
	result Int = square(5);
	// or even
	result = square(5);


	exampleRef Ref<Int> = \(5);
	inferred = \(5);

	x = 1;

	iDontExist(2, x=1);

	myArray = Array<Int>(5); // if length is static, go on stack -- done by 'allocate'


	if exampleRef.value == 25 {
		print("hello world");
	} else {
		// this would never occur
		print("I should not show up");
	}

	i = 0;
	while i <= 5 {
		i += 1;
	}

	match i {
		5 => print("hello"),
		* => print("else")
	}
};

square(x Int): Int => x^2;

squareIndirect(x Ref<Int>): Ref<Int> => \(\x^2); // the '\' operator calls a primitive function

main();